buildscript {
    repositories {
        mavenCentral();
    }

    dependencies {
        //classpath 'org.eclipse.jgit:org.eclipse.jgit:4.1.1.201511131810-r'
    }
}

import org.apache.tools.ant.filters.ReplaceTokens
import org.eclipse.jgit.api.Git
import org.eclipse.jgit.internal.storage.file.FileRepository

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

ext.mainClass = 'org.cirdles.topsoil.app.progress.MainWindow'

def configJavaExec = { JavaExec task ->
    task.main = mainClass
    task.classpath = sourceSets.main.runtimeClasspath
    task.standardInput = System.in
}

task run(dependsOn: project.classes, type: JavaExec) {
    configJavaExec(it)
}

task debug(dependsOn: project.classes, type: JavaExec) {
    configJavaExec(it)
    debug = true
}

// BEGIN BETTER VERSIONING
def getVersionName = { ->
    def repo = new FileRepository("$rootDir/.git");
    def git = new Git(repo);

    git.describe().call()
}

processResources {
    from('src/main/resources') {
        include '**/*.properties'
        filter(ReplaceTokens, tokens: [version: getVersionName()])
    }
}
// END BETTER VERSIONING

task jarWithDependencies(type: Jar) {
    manifest {
        attributes 'Main-Class': mainClass
    }

    baseName = 'topsoil-' + getVersionName()
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

dependencies {
    compile project(':core')

    compile 'com.google.code.findbugs:jsr305:3.0.0'
    compile 'com.google.inject:guice:4.0'
    compile 'com.google.inject.extensions:guice-multibindings:4.0'
    compile 'net.sf.opencsv:opencsv:2.3'
    compile 'org.flywaydb:flyway-core:3.2.1';
    compile 'org.mybatis:mybatis:3.3.0'
    compile 'org.mybatis:mybatis-guice:3.7'
    compile 'org.springframework:spring-jdbc:4.2.0.RELEASE'
    compile 'org.xerial:sqlite-jdbc:3.8.11.1'
}
