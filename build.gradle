plugins {
    id 'com.github.kt3k.coveralls' version '2.4.0x'
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'

    repositories {
        jcenter()
        mavenLocal()

        maven {
            url 'https://jitpack.io'
        }
    }
}

subprojects {
    apply plugin: 'checkstyle'
    //apply plugin: 'findbugs'
    apply plugin: 'maven'

    sourceCompatibility = '1.8'
    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    checkstyle {
        configFile file("${rootProject.projectDir}/config/checkstyle/checkstyle.xml")
        toolVersion = '6.11.2'
    }

//    findbugsTest {
//        excludeFilterConfig = resources.text.fromString '''
//            <FindBugsFilter>
//                <Match>
//                    <Bug code="UrF"/>
//                </Match>
//            </FindBugsFilter>
//        '''
//    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

//    task javadocJar(type: Jar, dependsOn: javadoc) {
//        classifier = 'javadoc'
//        from javadoc.destinationDir
//    }

    artifacts {
        archives sourcesJar
//        archives javadocJar
    }

//    tasks.withType(FindBugs) {
//        reports {
//            html.enabled = true
//            xml.enabled = false
//        }
//    }

    dependencies {
        compile 'ch.qos.logback:logback-classic:1.1.3'
        compile 'com.github.johnzeringue:extendsfx:v1.0.0-alpha.2'
        compile 'com.github.cirdles:commons:0f628cc'
        compile 'org.controlsfx:controlsfx:8.20.9'

        testCompile 'com.google.code.findbugs:annotations:3.0.0'
        testCompile 'com.google.jimfs:jimfs:1.0'
        testCompile 'junit:junit:4.12'
        testCompile 'org.assertj:assertj-core:3.3.0'
        testCompile 'org.hamcrest:hamcrest-all:1.3'
        testCompile 'org.mockito:mockito-core:2.0.31-beta'
        testCompile 'org.testfx:openjfx-monocle:1.8.0_20'
        testCompile 'org.testfx:testfx-junit:4.0.+'
    }
}

jacocoTestReport {
    dependsOn test

    sourceDirectories = files subprojects.sourceSets.main.allSource.srcDirs
    classDirectories = files subprojects.sourceSets.main.output
    executionData = files subprojects.jacocoTestReport.executionData

    reports {
        html.enabled true
        xml.enabled true
    }
}

coveralls {
    sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
}
