
plugins {
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.6.3'
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'

    sourceCompatibility = 8
    targetCompatibility = 8

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    ext {
        java9Compatible = JavaVersion.current().java9Compatible
    }

    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()

        maven {
            url 'https://jitpack.io'
        }
    }
}

subprojects {
    apply plugin: 'checkstyle'
//    apply plugin: 'findbugs'
    apply plugin: 'maven'

    checkstyle {
        configFile file("${rootProject.projectDir}/config/checkstyle/checkstyle.xml")
        toolVersion = '6.11.2'
    }

//    findbugsTest {
//        excludeFilterConfig = resources.text.fromString '''
//            <FindBugsFilter>
//                <Match>
//                    <Bug code="UrF"/>
//                </Match>
//            </FindBugsFilter>
//        '''
//    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    tasks.withType(FindBugs) {
        reports {
            html.enabled = true
            xml.enabled = false
        }
    }

    dependencies {
        implementation 'ch.qos.logback:logback-classic:1.1.3'
        implementation 'com.github.johnzeringue:extendsfx:v1.0.0-alpha.2'
        implementation 'com.github.cirdles:commons:0f628cc'

        testCompile 'org.hamcrest:hamcrest-all:1.3'
        testCompile 'com.google.code.findbugs:annotations:3.0.0'
        testCompile 'com.google.jimfs:jimfs:1.0'
        testCompile 'junit:junit:4.12'
        testCompile 'org.assertj:assertj-core:3.3.0'
        testCompile 'org.mockito:mockito-core:2.0.31-beta'
    }
}

jacocoTestReport {
    dependsOn test

    sourceDirectories = files subprojects.sourceSets.main.allSource.srcDirs
    classDirectories = files subprojects.sourceSets.main.output
    executionData = files subprojects.jacocoTestReport.executionData

    reports {
        html.enabled true
        xml.enabled true
    }
}

coveralls {
    sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
}
